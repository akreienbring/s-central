{"version":3,"file":"lowlight-HkzL583q.js","sources":["../../node_modules/lowlight/lib/common.js","../../node_modules/lowlight/lib/index.js"],"sourcesContent":["/**\n * @import {LanguageFn} from 'highlight.js'\n */\n\nimport arduino from 'highlight.js/lib/languages/arduino'\nimport bash from 'highlight.js/lib/languages/bash'\nimport c from 'highlight.js/lib/languages/c'\nimport cpp from 'highlight.js/lib/languages/cpp'\nimport csharp from 'highlight.js/lib/languages/csharp'\nimport css from 'highlight.js/lib/languages/css'\nimport diff from 'highlight.js/lib/languages/diff'\nimport go from 'highlight.js/lib/languages/go'\nimport graphql from 'highlight.js/lib/languages/graphql'\nimport ini from 'highlight.js/lib/languages/ini'\nimport java from 'highlight.js/lib/languages/java'\nimport javascript from 'highlight.js/lib/languages/javascript'\nimport json from 'highlight.js/lib/languages/json'\nimport kotlin from 'highlight.js/lib/languages/kotlin'\nimport less from 'highlight.js/lib/languages/less'\nimport lua from 'highlight.js/lib/languages/lua'\nimport makefile from 'highlight.js/lib/languages/makefile'\nimport markdown from 'highlight.js/lib/languages/markdown'\nimport objectivec from 'highlight.js/lib/languages/objectivec'\nimport perl from 'highlight.js/lib/languages/perl'\nimport php from 'highlight.js/lib/languages/php'\nimport phpTemplate from 'highlight.js/lib/languages/php-template'\nimport plaintext from 'highlight.js/lib/languages/plaintext'\nimport python from 'highlight.js/lib/languages/python'\nimport pythonRepl from 'highlight.js/lib/languages/python-repl'\nimport r from 'highlight.js/lib/languages/r'\nimport ruby from 'highlight.js/lib/languages/ruby'\nimport rust from 'highlight.js/lib/languages/rust'\nimport scss from 'highlight.js/lib/languages/scss'\nimport shell from 'highlight.js/lib/languages/shell'\nimport sql from 'highlight.js/lib/languages/sql'\nimport swift from 'highlight.js/lib/languages/swift'\nimport typescript from 'highlight.js/lib/languages/typescript'\nimport vbnet from 'highlight.js/lib/languages/vbnet'\nimport wasm from 'highlight.js/lib/languages/wasm'\nimport xml from 'highlight.js/lib/languages/xml'\nimport yaml from 'highlight.js/lib/languages/yaml'\n\n/**\n * Map of grammars.\n *\n * @type {Record<string, LanguageFn>}\n */\nexport const grammars = {\n  arduino,\n  bash,\n  c,\n  cpp,\n  csharp,\n  css,\n  diff,\n  go,\n  graphql,\n  ini,\n  java,\n  javascript,\n  json,\n  kotlin,\n  less,\n  lua,\n  makefile,\n  markdown,\n  objectivec,\n  perl,\n  php,\n  'php-template': phpTemplate,\n  plaintext,\n  python,\n  'python-repl': pythonRepl,\n  r,\n  ruby,\n  rust,\n  scss,\n  shell,\n  sql,\n  swift,\n  typescript,\n  vbnet,\n  wasm,\n  xml,\n  yaml\n}\n","/**\n * @import {ElementContent, Element, RootData, Root} from 'hast'\n * @import {Emitter, HLJSOptions as HljsOptions, HighlightResult, LanguageFn} from 'highlight.js'\n */\n\n/**\n * @typedef {Object} ExtraOptions\n *   Extra fields.\n * @property {ReadonlyArray<string> | null | undefined} [subset]\n *   List of allowed languages (default: all registered languages).\n *\n * @typedef Options\n *   Configuration for `highlight`.\n * @property {string | null | undefined} [prefix='hljs-']\n *   Class prefix (default: `'hljs-'`).\n *\n * @typedef {Options & ExtraOptions} AutoOptions\n *   Configuration for `highlightAuto`.\n */\n\nimport {ok as assert} from 'devlop'\nimport HighlightJs from 'highlight.js/lib/core'\n\n/** @type {AutoOptions} */\nconst emptyOptions = {}\n\nconst defaultPrefix = 'hljs-'\n\n/**\n * Create a `lowlight` instance.\n *\n * @param {Readonly<Record<string, LanguageFn>> | null | undefined} [grammars]\n *   Grammars to add (optional).\n * @returns\n *   Lowlight.\n */\nexport function createLowlight(grammars) {\n  const high = HighlightJs.newInstance()\n\n  if (grammars) {\n    register(grammars)\n  }\n\n  return {\n    highlight,\n    highlightAuto,\n    listLanguages,\n    register,\n    registerAlias,\n    registered\n  }\n\n  /**\n   * Highlight `value` (code) as `language` (name).\n   *\n   * @example\n   *   ```js\n   *   import {common, createLowlight} from 'lowlight'\n   *\n   *   const lowlight = createLowlight(common)\n   *\n   *   console.log(lowlight.highlight('css', 'em { color: red }'))\n   *   ```\n   *\n   *   Yields:\n   *\n   *   ```js\n   *   {type: 'root', children: [Array], data: {language: 'css', relevance: 3}}\n   *   ```\n   *\n   * @param {string} language\n   *   Programming language name.\n   * @param {string} value\n   *   Code to highlight.\n   * @param {Readonly<Options> | null | undefined} [options={}]\n   *   Configuration (optional).\n   * @returns {Root}\n   *   Tree; with the following `data` fields: `language` (`string`), detected\n   *   programming language name; `relevance` (`number`), how sure lowlight is\n   *   that the given code is in the language.\n   */\n  function highlight(language, value, options) {\n    assert(typeof language === 'string', 'expected `string` as `name`')\n    assert(typeof value === 'string', 'expected `string` as `value`')\n    const settings = options || emptyOptions\n    const prefix =\n      typeof settings.prefix === 'string' ? settings.prefix : defaultPrefix\n\n    if (!high.getLanguage(language)) {\n      throw new Error('Unknown language: `' + language + '` is not registered')\n    }\n\n    // See: <https://github.com/highlightjs/highlight.js/issues/3621#issuecomment-1528841888>\n    high.configure({__emitter: HastEmitter, classPrefix: prefix})\n\n    const result = /** @type {HighlightResult & {_emitter: HastEmitter}} */ (\n      high.highlight(value, {ignoreIllegals: true, language})\n    )\n\n    // `highlight.js` seems to use this (currently) for broken grammars, so let’s\n    // keep it in there just to be sure.\n    /* c8 ignore next 5 */\n    if (result.errorRaised) {\n      throw new Error('Could not highlight with `Highlight.js`', {\n        cause: result.errorRaised\n      })\n    }\n\n    const root = result._emitter.root\n\n    // Cast because it is always defined.\n    const data = /** @type {RootData} */ (root.data)\n\n    data.language = result.language\n    data.relevance = result.relevance\n\n    return root\n  }\n\n  /**\n   * Highlight `value` (code) and guess its programming language.\n   *\n   * @example\n   *   ```js\n   *   import {common, createLowlight} from 'lowlight'\n   *\n   *   const lowlight = createLowlight(common)\n   *\n   *   console.log(lowlight.highlightAuto('\"hello, \" + name + \"!\"'))\n   *   ```\n   *\n   *   Yields:\n   *\n   *   ```js\n   *   {type: 'root', children: [Array], data: {language: 'arduino', relevance: 2}}\n   *   ```\n   *\n   * @param {string} value\n   *   Code to highlight.\n   * @param {Readonly<AutoOptions> | null | undefined} [options={}]\n   *   Configuration (optional).\n   * @returns {Root}\n   *   Tree; with the following `data` fields: `language` (`string`), detected\n   *   programming language name; `relevance` (`number`), how sure lowlight is\n   *   that the given code is in the language.\n   */\n  function highlightAuto(value, options) {\n    assert(typeof value === 'string', 'expected `string` as `value`')\n    const settings = options || emptyOptions\n    const subset = settings.subset || listLanguages()\n\n    let index = -1\n    let relevance = 0\n    /** @type {Root | undefined} */\n    let result\n\n    while (++index < subset.length) {\n      const name = subset[index]\n\n      if (!high.getLanguage(name)) continue\n\n      const current = highlight(name, value, options)\n\n      if (\n        current.data &&\n        current.data.relevance !== undefined &&\n        current.data.relevance > relevance\n      ) {\n        relevance = current.data.relevance\n        result = current\n      }\n    }\n\n    return (\n      result || {\n        type: 'root',\n        children: [],\n        data: {language: undefined, relevance}\n      }\n    )\n  }\n\n  /**\n   * List registered languages.\n   *\n   * @example\n   *   ```js\n   *   import {createLowlight} from 'lowlight'\n   *   import markdown from 'highlight.js/lib/languages/markdown'\n   *\n   *   const lowlight = createLowlight()\n   *\n   *   console.log(lowlight.listLanguages()) // => []\n   *\n   *   lowlight.register({markdown})\n   *\n   *   console.log(lowlight.listLanguages()) // => ['markdown']\n   *   ```\n   *\n   * @returns {Array<string>}\n   *   Names of registered language.\n   */\n  function listLanguages() {\n    return high.listLanguages()\n  }\n\n  /**\n   * Register languages.\n   *\n   * @example\n   *   ```js\n   *   import {createLowlight} from 'lowlight'\n   *   import xml from 'highlight.js/lib/languages/xml'\n   *\n   *   const lowlight = createLowlight()\n   *\n   *   lowlight.register({xml})\n   *\n   *   // Note: `html` is an alias for `xml`.\n   *   console.log(lowlight.highlight('html', '<em>Emphasis</em>'))\n   *   ```\n   *\n   *   Yields:\n   *\n   *   ```js\n   *   {type: 'root', children: [Array], data: {language: 'html', relevance: 2}}\n   *   ```\n   *\n   * @overload\n   * @param {Readonly<Record<string, LanguageFn>>} grammars\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {string} name\n   * @param {LanguageFn} grammar\n   * @returns {undefined}\n   *\n   * @param {Readonly<Record<string, LanguageFn>> | string} grammarsOrName\n   *   Grammars or programming language name.\n   * @param {LanguageFn | undefined} [grammar]\n   *   Grammar, if with name.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function register(grammarsOrName, grammar) {\n    if (typeof grammarsOrName === 'string') {\n      assert(grammar !== undefined, 'expected `grammar`')\n      high.registerLanguage(grammarsOrName, grammar)\n    } else {\n      /** @type {string} */\n      let name\n\n      for (name in grammarsOrName) {\n        if (Object.hasOwn(grammarsOrName, name)) {\n          high.registerLanguage(name, grammarsOrName[name])\n        }\n      }\n    }\n  }\n\n  /**\n   * Register aliases.\n   *\n   * @example\n   *   ```js\n   *   import {createLowlight} from 'lowlight'\n   *   import markdown from 'highlight.js/lib/languages/markdown'\n   *\n   *   const lowlight = createLowlight()\n   *\n   *   lowlight.register({markdown})\n   *\n   *   // lowlight.highlight('mdown', '<em>Emphasis</em>')\n   *   // ^ would throw: Error: Unknown language: `mdown` is not registered\n   *\n   *   lowlight.registerAlias({markdown: ['mdown', 'mkdn', 'mdwn', 'ron']})\n   *   lowlight.highlight('mdown', '<em>Emphasis</em>')\n   *   // ^ Works!\n   *   ```\n   *\n   * @overload\n   * @param {Readonly<Record<string, ReadonlyArray<string> | string>>} aliases\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {string} language\n   * @param {ReadonlyArray<string> | string} alias\n   * @returns {undefined}\n   *\n   * @param {Readonly<Record<string, ReadonlyArray<string> | string>> | string} aliasesOrName\n   *   Map of programming language names to one or more aliases, or programming\n   *   language name.\n   * @param {ReadonlyArray<string> | string | undefined} [alias]\n   *   One or more aliases for the programming language, if with `name`.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function registerAlias(aliasesOrName, alias) {\n    if (typeof aliasesOrName === 'string') {\n      assert(alias !== undefined)\n      high.registerAliases(\n        // Note: copy needed because hljs doesn’t accept readonly arrays yet.\n        typeof alias === 'string' ? alias : [...alias],\n        {languageName: aliasesOrName}\n      )\n    } else {\n      /** @type {string} */\n      let key\n\n      for (key in aliasesOrName) {\n        if (Object.hasOwn(aliasesOrName, key)) {\n          const aliases = aliasesOrName[key]\n          high.registerAliases(\n            // Note: copy needed because hljs doesn’t accept readonly arrays yet.\n            typeof aliases === 'string' ? aliases : [...aliases],\n            {languageName: key}\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * Check whether an alias or name is registered.\n   *\n   * @example\n   *   ```js\n   *   import {createLowlight} from 'lowlight'\n   *   import javascript from 'highlight.js/lib/languages/javascript'\n   *\n   *   const lowlight = createLowlight({javascript})\n   *\n   *   console.log(lowlight.registered('funkyscript')) // => `false`\n   *\n   *   lowlight.registerAlias({javascript: 'funkyscript'})\n   *   console.log(lowlight.registered('funkyscript')) // => `true`\n   *   ```\n   *\n   * @param {string} aliasOrName\n   *   Name of a language or alias for one.\n   * @returns {boolean}\n   *   Whether `aliasOrName` is registered.\n   */\n  function registered(aliasOrName) {\n    return Boolean(high.getLanguage(aliasOrName))\n  }\n}\n\n/** @type {Emitter} */\nclass HastEmitter {\n  /**\n   * @param {Readonly<HljsOptions>} options\n   *   Configuration.\n   * @returns\n   *   Instance.\n   */\n  constructor(options) {\n    /** @type {HljsOptions} */\n    this.options = options\n    /** @type {Root} */\n    this.root = {\n      type: 'root',\n      children: [],\n      data: {language: undefined, relevance: 0}\n    }\n    /** @type {[Root, ...Array<Element>]} */\n    this.stack = [this.root]\n  }\n\n  /**\n   * @param {string} value\n   *   Text to add.\n   * @returns {undefined}\n   *   Nothing.\n   *\n   */\n  addText(value) {\n    if (value === '') return\n\n    const current = this.stack[this.stack.length - 1]\n    const tail = current.children[current.children.length - 1]\n\n    if (tail && tail.type === 'text') {\n      tail.value += value\n    } else {\n      current.children.push({type: 'text', value})\n    }\n  }\n\n  /**\n   *\n   * @param {unknown} rawName\n   *   Name to add.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  startScope(rawName) {\n    this.openNode(String(rawName))\n  }\n\n  /**\n   * @returns {undefined}\n   *   Nothing.\n   */\n  endScope() {\n    this.closeNode()\n  }\n\n  /**\n   * @param {HastEmitter} other\n   *   Other emitter.\n   * @param {string} name\n   *   Name of the sublanguage.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  __addSublanguage(other, name) {\n    const current = this.stack[this.stack.length - 1]\n    // Assume only element content.\n    const results = /** @type {Array<ElementContent>} */ (other.root.children)\n\n    if (name) {\n      current.children.push({\n        type: 'element',\n        tagName: 'span',\n        properties: {className: [name]},\n        children: results\n      })\n    } else {\n      current.children.push(...results)\n    }\n  }\n\n  /**\n   * @param {string} name\n   *   Name to add.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  openNode(name) {\n    const self = this\n    // First “class” gets the prefix. Rest gets a repeated underscore suffix.\n    // See: <https://github.com/highlightjs/highlight.js/commit/51806aa>\n    // See: <https://github.com/wooorm/lowlight/issues/43>\n    const className = name.split('.').map(function (d, i) {\n      return i ? d + '_'.repeat(i) : self.options.classPrefix + d\n    })\n    const current = this.stack[this.stack.length - 1]\n    /** @type {Element} */\n    const child = {\n      type: 'element',\n      tagName: 'span',\n      properties: {className},\n      children: []\n    }\n\n    current.children.push(child)\n    this.stack.push(child)\n  }\n\n  /**\n   * @returns {undefined}\n   *   Nothing.\n   */\n  closeNode() {\n    this.stack.pop()\n  }\n\n  /**\n   * @returns {undefined}\n   *   Nothing.\n   */\n  finalize() {}\n\n  /**\n   * @returns {string}\n   *   Nothing.\n   */\n  toHTML() {\n    return ''\n  }\n}\n"],"names":["grammars","arduino","bash","c","cpp","csharp","css","diff","go","graphql","ini","java","javascript","json","kotlin","less","lua","makefile","markdown","objectivec","perl","php","phpTemplate","plaintext","python","pythonRepl","r","ruby","rust","scss","shell","sql","swift","typescript","vbnet","wasm","xml","yaml","emptyOptions","defaultPrefix","createLowlight","high","HighlightJs","register","highlight","highlightAuto","listLanguages","registerAlias","registered","language","value","options","settings","prefix","HastEmitter","result","root","data","subset","index","relevance","name","current","grammarsOrName","grammar","aliasesOrName","alias","key","aliases","aliasOrName","tail","rawName","other","results","self","className","d","i","child"],"mappings":"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","x_google_ignoreList":[0,1]}